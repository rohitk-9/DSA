-----------------------------------------Sunday 17 September 2023  
Fibonacci series

SOLUTION
a=0
b=1
n=int(input("Enter any number : "))
for i in range(0, n):
    print(a)
    c=a+b
    a=b
    b=c
------------------------------------------Sunday 17 September 2023 
Given an array a of size N which contains elements from 0 to N-1, you need to find all the elements occurring more than once in the given array. Return the answer in ascending order. If no such element is found, return list containing [-1]. 

Note: The extra space is only for the array to be returned. Try and perform all operations within the provided array. 

Example 1:

Input:
N = 4
a[] = {0,3,1,2}
Output: 
-1
Explanation: 
There is no repeating element in the array. Therefore output is -1.

Example 2:

Input:
N = 5
a[] = {2,3,1,2,3}
Output: 
2 3 
Explanation: 
2 and 3 occur more than once in the given array.

SOLUTION

def duplicates(arr, n):
    d = {}
    res = []
    for i in arr:
        if i in d:
            d[i] += 1
        else:
            d[i] = 1
    sorted_dict = dict(sorted(d.items(), key=lambda item: item[1]))
    for key in sorted_dict.keys():
        if sorted_dict[key] > 1:
            res.append(key)
            
    if not res:
        return [-1]
    return sorted(res)


arr=[2,9,9,7,9,2,4,5,8]
n=len(arr)
print(duplicates(arr, n))
-------------------------------------------------------------------
Given a non-negative integer N. The task is to check if N is a power of 2. More formally, check if N can be expressed as 2x for some integer x.

Example 1:

Input: 
N = 8
Output: 
YES
Explanation:
8 is equal to 2 raised to 3 (23 = 8).

Example 2:

Input: 
N = 98
Output: 
NO
Explanation: 
98 cannot be obtained by any power of 2.

SOLUTION
def isPowerOfTwo(n):
    if n <= 0:
        return False
    return n & (n - 1) == 0
n=int(input("Enter any number: "))
print(isPowerOfTwo(n))
----------------------------------------------------------------------
Given an integer N. The task is to return the position of first set bit found from the right side in the binary representation of the number.
Note: If there is no set bit in the integer N, then return 0 from the function.  

Example 1:

Input: 
N = 18
Output: 
2
Explanation: 
Binary representation of 18 is 010010,the first set bit from the right side is at position 2.

Example 2:

Input: 
N = 12 
Output: 
3 
Explanation: 
Binary representation of  12 is 1100, the first set bit from the right side is at position 3.

SOLUTION

a=int(input("Enter : "))
a=bin(a)
b=[]
for i in a:
    b.append(i)
r = b[::-1]
for i in range(0, len(r)-2):
    if r[i]=='1':
        print(i+1)
        break
-------------------------------------------------------------------
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

SOLUTION

def twoSum(nums, target):
    res=[]
    for i in range(0, len(nums)-1):
        for j in range(1, len(nums)):
            if i==j:
                continue
            if (nums[i]+nums[j]) == target:
                res.append(i)
                res.append(j)
                return res

nums=[2,5,5,7,9]
target=10
print(twoSum(nums, target))
---------------------------------------------------------------------------
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].

Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].

SOLUTION

nums = [2,3,4]
target = 6
def twoSum(numbers, target):
    left, right = 0, len(numbers) - 1
    while left < right:
        current_sum = numbers[left] + numbers[right]
        if current_sum == target:
            return [left + 1, right + 1]
        elif current_sum < target:
            left += 1
        else:
            right -= 1
print(twoSum(nums, target))
--------------------------------------------------------------------
Given a matrix of size N x N. Print the elements of the matrix in the snake like pattern depicted below.

Example 1:

Input:
N = 3 
matrix[][] = {{45, 48, 54},
             {21, 89, 87}
             {70, 78, 15}}
Output: 
45 48 54 87 89 21 70 78 15 
Explanation:
Matrix is as below:
45 48 54
21 89 87
70 78 15
Printing it in snake pattern will lead to 
the output as 45 48 54 87 89 21 70 78 15.

SOLUTION

class Solution:
    def snakePattern(self, matrix): 
        n = len(matrix)
        self.ans_list = []
        m = n
        for i in range(n):
            if i%2==0:
                for j in range(n):
                    self.ans_list.append(matrix[i][j])
            else:
                for k in range(m-1, -1, -1):
                    self.ans_list.append(matrix[i][k])
        return self.ans_list

N = 3
matrix = [[45, 48, 54],
             [21, 89, 87],
             [70, 78, 15]]

obj = Solution()
print(obj.snakePattern(matrix))
--------------------------------------------------------------------
Given a string str which may contains lowercase and uppercase chracters. The task is to remove all duplicate characters from the string and find the resultant string. The order of remaining characters in the output should be same as in the original string.

Example 1:

Input:
str = "geEksforGEeks"
Output: 
"geEksforG"
Explanation: 
After removing duplicate characters such as E, e, k, s, we have string as "geEksforG".

Example 2:

Input:
str = "HaPpyNewYear"
Output: 
"HaPpyNewYr"
Explanation: 
After removing duplicate characters such as e, a, we have string as "HaPpyNewYr".



class Solution:
	def removeDuplicates(self,str):
	    char_dict = {}
        result = ""
        for char in str:
            if char not in char_dict:
                char_dict[char] = True
                result += char
        return result

